export const ejercicios = [
  {
    id: 1,
    titulo: "Estructuras Condicionales: if-else",
    instrucciones: `
      Conceptos fundamentales de if-else:

      1. ¬øQu√© es una estructura if-else en programaci√≥n?
      2. ¬øCu√°ndo se debe usar if-else en un programa?
      3. Escribe un programa que determine si un n√∫mero es par o impar.
      4. Desarrolla un programa que clasifique edades en categor√≠as:
         - Menor de 13 ‚Üí "Eres un ni√±o"
         - Entre 13 y 17 ‚Üí "Eres un adolescente"
         - 18 o m√°s ‚Üí "Eres un adulto"
    `,
  },
  {
    id: 2,
    titulo: "Estructuras de Control Avanzadas",
    instrucciones: `
      Estructuras de control en JavaScript:

      1. ¬øCu√°ndo usar switch en lugar de if-else?
      2. ¬øCu√°l es la diferencia entre while y do-while?
      3. ¬øQu√© ventajas tiene forEach sobre un bucle for tradicional?
      4. ¬øCu√°ndo usar .map en lugar de forEach?
      5. Implementa ejemplos de cada tipo de bucle.
    `,
  },
  {
    id: 3,
    titulo: "Ejercicios Pr√°cticos de Control de Flujo",
    instrucciones: `
      Resuelve los siguientes ejercicios:

      1. Crea un programa que use switch para convertir n√∫meros (1-7) a d√≠as de la semana.
      2. Implementa un bucle while que cuente regresivamente desde 10 hasta 1.
      3. Usa forEach para sumar todos los n√∫meros de un array.
      4. Utiliza .map para duplicar todos los n√∫meros de un array.
      5. Combina if-else con bucles para encontrar el n√∫mero m√°s grande en un array.
    `,
  },
];

export const respuestas = [
  {
    id: 1,
    codigo: `
// 1. ¬øQu√© es una estructura if-else en programaci√≥n?
/*
Una estructura if-else es una estructura de control que permite que un programa 
tome decisiones y ejecute diferentes bloques de c√≥digo bas√°ndose en condiciones.
La sintaxis b√°sica es:
*/
if (condicion) {
  // c√≥digo que se ejecuta si la condici√≥n es verdadera
} else {
  // c√≥digo que se ejecuta si la condici√≥n es falsa
}

// 2. ¬øCu√°ndo se debe usar if-else en un programa?
/*
Se debe usar if-else cuando necesitamos que nuestro programa:
- Tome decisiones basadas en condiciones
- Ejecute diferentes c√≥digos seg√∫n una condici√≥n
- Valide datos o entradas de usuario
Ejemplo pr√°ctico:
*/
function validarEdad(edad) {
  if (edad >= 18) {
    return "Puede ingresar al sitio";
  } else {
    return "Acceso denegado: debe ser mayor de edad";
  }
}

// 3. Programa para determinar si un n√∫mero es par o impar
function esParOImpar(numero) {
  if (numero % 2 === 0) {
    return "Es par";
  } else {
    return "Es impar";
  }
}

// 4. Programa de clasificaci√≥n de edades
function clasificarEdad(edad) {
  if (edad < 13) {
    return "Eres un ni√±o";
  } else if (edad >= 13 && edad <= 17) {
    return "Eres un adolescente";
  } else {
    return "Eres un adulto";
  }
}

// Ejemplos de uso:
console.log(esParOImpar(4));  // "Es par"
console.log(esParOImpar(7));  // "Es impar"
console.log(clasificarEdad(8));   // "Eres un ni√±o"
console.log(clasificarEdad(15));  // "Eres un adolescente"
console.log(clasificarEdad(25));  // "Eres un adulto"`,
    descripcion: `
üîç Conceptos clave de if-else:

‚Ä¢ Estructura de control condicional
‚Ä¢ Toma de decisiones en el c√≥digo
‚Ä¢ Uso de operadores de comparaci√≥n (>, <, >=, <=, ===)
‚Ä¢ Operadores l√≥gicos (&&, ||)
‚Ä¢ Bloques de c√≥digo y scope
‚Ä¢ Buenas pr√°cticas de indentaci√≥n y comentarios
    `,
  },
  {
    id: 2,
    codigo: `
// 1. ¬øCu√°ndo usar switch en lugar de if-else?
/*
Switch es mejor cuando:
- Comparamos una variable contra valores espec√≠ficos
- Tenemos m√∫ltiples casos posibles
- Queremos mejor legibilidad que m√∫ltiples if-else
*/
function ejemploSwitch(opcion) {
  switch (opcion) {
    case 1: return "Primera opci√≥n";
    case 2: return "Segunda opci√≥n";
    case 3: return "Tercera opci√≥n";
    default: return "Opci√≥n no v√°lida";
  }
}

// 2. Diferencia entre while y do-while
// While: eval√∫a la condici√≥n antes de ejecutar
let contador = 5;
while (contador > 0) {
  console.log(contador);
  contador--;
}

// Do-while: ejecuta al menos una vez
let numero = 0;
do {
  console.log("Se ejecuta al menos una vez");
} while (numero > 0);

// 3 y 4. forEach vs map
const numeros = [1, 2, 3, 4, 5];

// forEach: para efectos secundarios (no devuelve nada)
console.log("forEach:");
numeros.forEach(num => console.log(num * 2));

// map: para transformar datos (devuelve nuevo array)
const duplicados = numeros.map(num => num * 2);
console.log("map:", duplicados);

// 5. Ejemplos de cada tipo de bucle
// For tradicional
for (let i = 0; i < 3; i++) {
  console.log("For:", i);
}

// While
let i = 0;
while (i < 3) {
  console.log("While:", i);
  i++;
}

// Do-while
let j = 0;
do {
  console.log("Do-while:", j);
  j++;
} while (j < 3);`,
    descripcion: `
üîç Conceptos clave de estructuras de control:

‚Ä¢ Switch: Alternativa elegante a m√∫ltiples if-else
‚Ä¢ While: Bucle que eval√∫a antes de ejecutar
‚Ä¢ Do-while: Bucle que ejecuta al menos una vez
‚Ä¢ forEach: Para iterar sin retornar valores
‚Ä¢ map: Para transformar arrays
‚Ä¢ Diferencias y casos de uso de cada estructura
    `,
  },
  {
    id: 3,
    codigo: `
// 1. Switch para d√≠as de la semana
function obtenerDia(numero) {
  switch (numero) {
    case 1: return "Lunes";
    case 2: return "Martes";
    case 3: return "Mi√©rcoles";
    case 4: return "Jueves";
    case 5: return "Viernes";
    case 6: return "S√°bado";
    case 7: return "Domingo";
    default: return "N√∫mero inv√°lido";
  }
}

// 2. Cuenta regresiva con while
function cuentaRegresiva() {
  let numero = 10;
  while (numero > 0) {
    console.log(numero);
    numero--;
  }
}

// 3. Suma con forEach
function sumarArray(numeros) {
  let suma = 0;
  numeros.forEach(numero => {
    suma += numero;
  });
  return suma;
}

// 4. Duplicar con map
const numeros = [1, 2, 3, 4, 5];
const duplicados = numeros.map(numero => numero * 2);

// 5. Encontrar el mayor n√∫mero
function encontrarMayor(numeros) {
  let mayor = numeros[0];
  for (let i = 1; i < numeros.length; i++) {
    if (numeros[i] > mayor) {
      mayor = numeros[i];
    }
  }
  return mayor;
}`,
    descripcion: `
üîç Conceptos avanzados:

‚Ä¢ Uso pr√°ctico de switch
‚Ä¢ Bucles while para conteo
‚Ä¢ forEach para iteraci√≥n simple
‚Ä¢ map para transformaci√≥n de datos
‚Ä¢ Combinaci√≥n de estructuras de control
    `,
  },
];
